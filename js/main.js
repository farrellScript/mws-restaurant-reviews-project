let restaurants,neighborhoods,cuisines;var newMap,markers=[];document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZmFycmVsbHNjcmlwdCIsImEiOiJjamJiaTl3dHMxOGxsMzJwZTlmYnN4ZHN5In0.6Ey50el0atwjDygO_cO0sA",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),a=e.selectedIndex,s=t.selectedIndex,n=e[a].value,r=t[s].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,r,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.className="restaurant__container";const a=document.createElement("img");a.className="restaurant__image",a.alt=DBHelper.imageTextForRestaurant(e),a.srcset=DBHelper.imageSrcSetForRestaurant(e),a.src=DBHelper.imageUrlForRestaurant(e),t.append(a);const s=document.createElement("div");s.className="restaurant__textcontainer";const n=document.createElement("h2");n.className="restaurant__name",n.innerHTML=e.name,s.append(n);const r=document.createElement("div");r.className="restaurant__reviewcontainer";const o=5-DBHelper.ratingForRestaurant(e);for(let t=0;t<DBHelper.ratingForRestaurant(e);t++){const e=document.createElement("img");e.className="restaurant__star restaurant__star--full",e.src="/img/fullstar.svg",e.alt="",r.append(e)}for(let e=0;e<o;e++){const e=document.createElement("img");e.className="restaurant__star restaurant__star--empty",e.src="/img/emptystar.svg",e.alt="",r.append(e)}s.append(r);const l=document.createElement("p");l.className="restaurant__cuisine",l.innerHTML=e.cuisine_type,s.append(l);const c=document.createElement("p");c.className="restaurant__neighborhood",c.innerHTML=e.neighborhood,s.append(c);const i=document.createElement("hr");i.className="restaurant__hr",s.append(i);const u=document.createElement("p");u.className="restaurant__address",u.innerHTML=e.address,s.append(u);const m=document.createElement("a");return m.className="restaurant__link",m.innerHTML=DBHelper.urlTextForRestaurant(e),m.href=DBHelper.urlForRestaurant(e),s.append(m),t.append(s),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url})})}),document.getElementById("neighborhoods-select").addEventListener("focus",function(){this.previousElementSibling.classList.add("filter__label--active")}),document.getElementById("neighborhoods-select").addEventListener("blur",function(){"all"===this.value&&this.previousElementSibling.classList.remove("filter__label--active")}),document.getElementById("cuisines-select").addEventListener("focus",function(){this.previousElementSibling.classList.add("filter__label--active")}),document.getElementById("cuisines-select").addEventListener("blur",function(){"all"===this.value&&this.previousElementSibling.classList.remove("filter__label--active")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
