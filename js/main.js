let restaurants,neighborhoods,cuisines;var newMap,markers=[];if("serviceWorker"in navigator){function _trackInstalling(e){e.addEventListener("statechange",function(){"installed"==e.state&&_updateReady(e)})}var focusedElement,refreshing;function _updateReady(e){document.getElementById("update-version").addEventListener("click",function(){e.postMessage({action:"skipWaiting"})}),document.getElementById("dismiss-version").addEventListener("click",function(){document.getElementById("toast").classList.remove("active"),focusedElement.focus()}),document.getElementById("toast").addEventListener("keydown",function(e){9===e.keyCode&&(e.shiftKey?document.activeElement===n&&(e.preventDefault(),o.focus(),console.log("current focus :",document.activeElement)):document.activeElement===o&&(e.preventDefault(),n.focus())),27===e.keyCode&&(document.getElementById("toast").classList.remove("active"),focusedElement.focus())}),(focusedElement=document.activeElement).tabindex=1;var t=document.querySelectorAll("#toast p, #update-version, #dismiss-version"),n=(t=Array.prototype.slice.call(t))[0],o=t[t.length-1];document.getElementById("toast").classList.add("active"),document.querySelector("#toast p").focus()}navigator.serviceWorker.register("/sw.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?_updateReady():e.installing?_trackInstalling(e.installing):e.addEventListener("updatefound",function(){_trackInstalling(e.installing)}))}).catch(function(e){console.log("error registering service worker: ",e)}),navigator.serviceWorker.addEventListener("controllerchange",function(){console.log("controller change"),refreshing||(window.location.reload(),refreshing=!0)})}document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"<your MAPBOX API KEY HERE>",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,o=t.selectedIndex,s=e[n].value,a=t[o].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,a,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),n=document.createElement("img");n.className="restaurant-img",n.alt=DBHelper.imageTextForRestaurant(e),n.srcset=DBHelper.imageSrcSetForRestaurant(e),n.src=DBHelper.imageUrlForRestaurant(e),t.append(n);const o=document.createElement("h2");o.innerHTML=e.name,t.append(o);const s=document.createElement("p");s.innerHTML=e.neighborhood,t.append(s);const a=document.createElement("p");a.innerHTML=e.address,t.append(a);const r=document.createElement("a");return r.innerHTML=DBHelper.urlTextForRestaurant(e),r.href=DBHelper.urlForRestaurant(e),t.append(r),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
