class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL).then(function(e){if(200===e.status)return e.json();{const r=`Request failed. Returned status of ${e.body}`;t(r,null)}}).then(function(e){t(null,e)}).catch(function(t){console.log("error: ",t)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.find(e=>e.id==t);r?e(null,r):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=t&&(a=a.filter(e=>e.cuisine_type==t)),"all"!=e&&(a=a.filter(t=>t.neighborhood==e)),r(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static urlTextForRestaurant(t){return`View Details For ${t.name}`}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}.jpg`}static imageTextForRestaurant(t){return`${t.name}`}static ratingForRestaurant(t){let e=0,r=0;return t.reviews.map(t=>{e++,r+=parseInt(t.rating)}),Math.round(r/e)}static imageSrcSetForRestaurant(t){return`/img/${t.photograph}_1x.jpg 1x, /img/${t.photograph}_2x.jpg 2x`}static imageJpgSrcSetForRestaurant(t){return`/img/${t.photograph}_1x.jpg 1x, /img/${t.photograph}_2x.jpg 2x`}static imageWebPSrcSetForRestaurant(t){return`/img/${t.photograph}_1x.webp 1x, /img/${t.photograph}_2x.webp 2x`}static imageSrcForRestaurant(t){return`/img/${t.photograph}_1x.jpg`}static mapMarkerForRestaurant(t,e){const r=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return r.addTo(newMap),r}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
