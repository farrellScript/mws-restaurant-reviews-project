class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){let e=new XMLHttpRequest;e.open("GET",DBHelper.DATABASE_URL),e.onload=(()=>{if(200===e.status){const a=JSON.parse(e.responseText);a.restaurants;t(null,a)}else{const a=`Request failed. Returned status of ${e.status}`;t(a,null)}}),e.send()}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.find(e=>e.id==t);a?e(null,a):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.filter(e=>e.cuisine_type==t);e(null,a)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.filter(e=>e.neighborhood==t);e(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,a){DBHelper.fetchRestaurants((r,s)=>{if(r)a(r,null);else{let r=s;"all"!=t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!=e&&(r=r.filter(t=>t.neighborhood==e)),a(null,r)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].neighborhood),r=e.filter((t,a)=>e.indexOf(t)==a);t(null,r)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].cuisine_type),r=e.filter((t,a)=>e.indexOf(t)==a);t(null,r)}})}static urlTextForRestaurant(t){return`View Details For ${t.name}`}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}.jpg`}static imageTextForRestaurant(t){return`${t.name}`}static ratingForRestaurant(t){let e=0,a=0;return t.reviews.map(t=>{e++,a+=parseInt(t.rating)}),Math.round(a/e)}static imageSrcSetForRestaurant(t){return`/img/${t.photograph}_1x.jpg 1x, /img/${t.photograph}_2x.jpg 2x`}static imageJpgSrcSetForRestaurant(t){return`/img/${t.photograph}_1x.jpg 1x, /img/${t.photograph}_2x.jpg 2x`}static imageWebPSrcSetForRestaurant(t){return`/img/${t.photograph}_1x.webp 1x, /img/${t.photograph}_2x.webp 2x`}static imageSrcForRestaurant(t){return`/img/${t.photograph}_1x.jpg`}static mapMarkerForRestaurant(t,e){const a=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return a.addTo(newMap),a}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
